package com.runanywhere.runanywhereai.presentation.chat.components

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Analytics\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport com.runanywhere.runanywhereai.domain.models.ChatMessage\nimport java.text.SimpleDateFormat\nimport java.util.*\n\n/**\n * Message bubble component for displaying chat messages\n */\n@Composable\nfun MessageBubble(\n    message: ChatMessage,\n    modifier: Modifier = Modifier\n) {\n    val shape = if (message.isFromUser) {\n        RoundedCornerShape(\n            topStart = 20.dp,\n            topEnd = 4.dp,\n            bottomStart = 20.dp,\n            bottomEnd = 20.dp\n        )\n    } else {\n        RoundedCornerShape(\n            topStart = 4.dp,\n            topEnd = 20.dp,\n            bottomStart = 20.dp,\n            bottomEnd = 20.dp\n        )\n    }\n    \n    val colors = if (message.isFromUser) {\n        CardDefaults.cardColors(\n            containerColor = MaterialTheme.colorScheme.primary,\n            contentColor = MaterialTheme.colorScheme.onPrimary\n        )\n    } else {\n        CardDefaults.cardColors(\n            containerColor = MaterialTheme.colorScheme.surfaceVariant,\n            contentColor = MaterialTheme.colorScheme.onSurfaceVariant\n        )\n    }\n    \n    Row(\n        modifier = modifier,\n        horizontalArrangement = if (message.isFromUser) Arrangement.End else Arrangement.Start\n    ) {\n        Card(\n            modifier = Modifier.widthIn(max = 280.dp),\n            shape = shape,\n            colors = colors\n        ) {\n            Column(\n                modifier = Modifier.padding(12.dp)\n            ) {\n                Text(\n                    text = message.content,\n                    style = MaterialTheme.typography.bodyMedium\n                )\n                \n                // Show thinking content if available\n                message.thinking?.let { thinking ->\n                    Spacer(modifier = Modifier.height(8.dp))\n                    Card(\n                        colors = CardDefaults.cardColors(\n                            containerColor = MaterialTheme.colorScheme.surface.copy(alpha = 0.7f)\n                        )\n                    ) {\n                        Column(\n                            modifier = Modifier.padding(8.dp)\n                        ) {\n                            Text(\n                                text = \"Thinking:\",\n                                style = MaterialTheme.typography.labelSmall,\n                                fontWeight = FontWeight.Bold\n                            )\n                            Text(\n                                text = thinking,\n                                style = MaterialTheme.typography.bodySmall\n                            )\n                        }\n                    }\n                }\n                \n                Spacer(modifier = Modifier.height(4.dp))\n                \n                Row(\n                    horizontalArrangement = Arrangement.SpaceBetween,\n                    verticalAlignment = Alignment.CenterVertically,\n                    modifier = Modifier.fillMaxWidth()\n                ) {\n                    Text(\n                        text = formatTimestamp(message.timestamp),\n                        style = MaterialTheme.typography.labelSmall,\n                        color = if (message.isFromUser) \n                            MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.7f)\n                        else \n                            MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)\n                    )\n                    \n                    // Show analytics chip for assistant messages\n                    if (!message.isFromUser && message.analytics != null) {\n                        AnalyticsChip(\n                            analytics = message.analytics,\n                            modifier = Modifier.padding(start = 8.dp)\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun AnalyticsChip(\n    analytics: com.runanywhere.runanywhereai.domain.models.MessageAnalytics,\n    modifier: Modifier = Modifier\n) {\n    var showDetails by remember { mutableStateOf(false) }\n    \n    AssistChip(\n        onClick = { showDetails = !showDetails },\n        label = {\n            Text(\n                text = \"${analytics.totalGenerationTime}ms\",\n                style = MaterialTheme.typography.labelSmall\n            )\n        },\n        leadingIcon = {\n            Icon(\n                Icons.Default.Analytics,\n                contentDescription = \"Analytics\",\n                modifier = Modifier.size(14.dp)\n            )\n        },\n        modifier = modifier\n    )\n    \n    if (showDetails) {\n        // TODO: Implement analytics details popup when needed\n    }\n}\n\nprivate fun formatTimestamp(timestamp: Long): String {\n    val formatter = SimpleDateFormat(\"HH:mm\", Locale.getDefault())\n    return formatter.format(Date(timestamp))\n}
