#!/bin/bash

# Configuration Manager for RunAnywhere SDK
# This script manages environment configurations for the SDK build process

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SDK_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
CONFIG_DIR="$SDK_ROOT/config"
BUILD_DIR="$SDK_ROOT/build/generated/config"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to display usage
usage() {
    echo "Usage: $0 [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  setup <env>      Set up configuration for specified environment (dev/staging/prod)"
    echo "  generate <env>   Generate configuration file from template for environment"
    echo "  validate         Validate current configuration file"
    echo "  clean            Remove generated configuration files"
    echo "  show             Display current configuration (sensitive data masked)"
    echo ""
    echo "Options:"
    echo "  -h, --help       Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 setup dev          # Set up development configuration"
    echo "  $0 generate prod      # Generate production configuration"
    echo "  $0 validate           # Validate current configuration"
    exit 1
}

# Function to check if config file exists
check_config_exists() {
    local env=$1
    local config_file="$CONFIG_DIR/${env}.json"

    if [[ ! -f "$config_file" ]]; then
        print_message $YELLOW "Configuration file not found: $config_file"
        print_message $YELLOW "Creating from example..."

        if [[ -f "$CONFIG_DIR/${env}.example.json" ]]; then
            cp "$CONFIG_DIR/${env}.example.json" "$config_file"
            print_message $GREEN "Created $config_file from example"
            print_message $YELLOW "Please edit the file to add your actual API keys and URLs"
            return 1
        else
            print_message $RED "Example file not found: $CONFIG_DIR/${env}.example.json"
            exit 1
        fi
    fi
    return 0
}

# Function to setup configuration for environment
setup_config() {
    local env=$1

    if [[ "$env" != "dev" && "$env" != "staging" && "$env" != "prod" ]]; then
        print_message $RED "Invalid environment: $env"
        print_message $YELLOW "Valid environments: dev, staging, prod"
        exit 1
    fi

    print_message $BLUE "Setting up configuration for: $env"

    # Check if config exists
    if ! check_config_exists "$env"; then
        print_message $YELLOW "Edit $CONFIG_DIR/${env}.json with your actual values, then run this command again"
        exit 0
    fi

    # Create build directory if it doesn't exist
    mkdir -p "$BUILD_DIR"

    # Copy config to build directory
    cp "$CONFIG_DIR/${env}.json" "$BUILD_DIR/current.json"

    # Create Kotlin file with embedded config
    cat > "$BUILD_DIR/SDKConfiguration.kt" << EOF
package com.runanywhere.sdk.generated

/**
 * AUTO-GENERATED FILE - DO NOT EDIT
 * Generated by config-manager.sh for $env environment
 * Generated at: $(date)
 */
object SDKConfiguration {
    const val CONFIG_JSON = """
$(cat "$CONFIG_DIR/${env}.json" | sed 's/"/\\"/g' | sed 's/^/        /')
    """

    const val ENVIRONMENT = "$env"
}
EOF

    print_message $GREEN "✅ Configuration set up for $env environment"
    print_message $BLUE "Generated files:"
    print_message $NC "  - $BUILD_DIR/current.json"
    print_message $NC "  - $BUILD_DIR/SDKConfiguration.kt"
}

# Function to generate configuration from template
generate_config() {
    local env=$1

    if [[ "$env" != "dev" && "$env" != "staging" && "$env" != "prod" ]]; then
        print_message $RED "Invalid environment: $env"
        exit 1
    fi

    local template_file="$CONFIG_DIR/template.json"
    local example_file="$CONFIG_DIR/${env}.example.json"
    local output_file="$CONFIG_DIR/${env}.json"

    if [[ -f "$output_file" ]]; then
        print_message $YELLOW "Configuration already exists: $output_file"
        read -p "Overwrite? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 0
        fi
    fi

    if [[ -f "$example_file" ]]; then
        cp "$example_file" "$output_file"
        print_message $GREEN "Generated $output_file from example"
    else
        cp "$template_file" "$output_file"
        print_message $GREEN "Generated $output_file from template"
    fi

    print_message $YELLOW "⚠️  Remember to update the configuration with actual values!"
    print_message $YELLOW "Edit: $output_file"
}

# Function to validate configuration
validate_config() {
    local config_file="$BUILD_DIR/current.json"

    if [[ ! -f "$config_file" ]]; then
        print_message $RED "No configuration found. Run 'setup' first."
        exit 1
    fi

    print_message $BLUE "Validating configuration..."

    # Check if JSON is valid
    if ! python3 -m json.tool "$config_file" > /dev/null 2>&1; then
        print_message $RED "❌ Invalid JSON in configuration file"
        exit 1
    fi

    # Check required fields
    local required_fields=("environment" "apiBaseUrl")
    for field in "${required_fields[@]}"; do
        if ! grep -q "\"$field\"" "$config_file"; then
            print_message $RED "❌ Missing required field: $field"
            exit 1
        fi
    done

    # Check environment value
    local env_value=$(python3 -c "import json; print(json.load(open('$config_file'))['environment'])" 2>/dev/null)
    if [[ "$env_value" != "DEVELOPMENT" && "$env_value" != "STAGING" && "$env_value" != "PRODUCTION" ]]; then
        print_message $RED "❌ Invalid environment value: $env_value"
        exit 1
    fi

    print_message $GREEN "✅ Configuration is valid"
}

# Function to clean generated files
clean_config() {
    print_message $BLUE "Cleaning generated configuration files..."

    if [[ -d "$BUILD_DIR" ]]; then
        rm -rf "$BUILD_DIR"
        print_message $GREEN "✅ Cleaned: $BUILD_DIR"
    else
        print_message $YELLOW "Nothing to clean"
    fi
}

# Function to show current configuration (with sensitive data masked)
show_config() {
    local config_file="$BUILD_DIR/current.json"

    if [[ ! -f "$config_file" ]]; then
        print_message $RED "No configuration found. Run 'setup' first."
        exit 1
    fi

    print_message $BLUE "Current Configuration (sensitive data masked):"
    echo ""

    # Use Python to pretty-print and mask sensitive data
    python3 << EOF
import json
import re

with open('$config_file', 'r') as f:
    config = json.load(f)

# Mask sensitive fields
sensitive_fields = ['apiKey', 'defaultApiKey', 'apiBaseUrl', 'cdnBaseUrl', 'telemetryUrl', 'analyticsUrl']
for field in sensitive_fields:
    if field in config and config[field]:
        if 'url' in field.lower():
            # Keep protocol and domain, mask the rest
            config[field] = re.sub(r'(https?://[^/]+).*', r'\1/***', config[field])
        else:
            # Mask API keys
            config[field] = '***MASKED***'

# Mask model URLs
if 'modelUrls' in config:
    for key in config['modelUrls']:
        if config['modelUrls'][key]:
            config['modelUrls'][key] = re.sub(r'(https?://[^/]+).*', r'\1/***', config['modelUrls'][key])

print(json.dumps(config, indent=2))
EOF
}

# Main script logic
case "$1" in
    setup)
        if [[ -z "$2" ]]; then
            print_message $RED "Environment not specified"
            usage
        fi
        setup_config "$2"
        ;;
    generate)
        if [[ -z "$2" ]]; then
            print_message $RED "Environment not specified"
            usage
        fi
        generate_config "$2"
        ;;
    validate)
        validate_config
        ;;
    clean)
        clean_config
        ;;
    show)
        show_config
        ;;
    -h|--help)
        usage
        ;;
    *)
        print_message $RED "Unknown command: $1"
        usage
        ;;
esac
